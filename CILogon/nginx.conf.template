worker_processes auto;

error_log  /usr/local/openresty/nginx/conf/error.log debug;

events {
    worker_connections  1024;
}

http {
    resolver ${DNS_RESOLVER};

    lua_package_path '~/lua/?.lua;;';
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;
    lua_shared_dict sessions 10m;

    #init_by_lua_block {
    #    require("resty.core")
    #    ngx.log(ngx.ERR, "OpenResty initialization started")
    #}

    sendfile on;

    keepalive_timeout 65;

    access_log /usr/local/openresty/nginx/conf/access.log;

    server {
        listen 80;
        server_name ${PROXY_FQDN};
        # server_name localhost;

        #ssl_certificate /etc/letsencrypt/live/${PROXY_FQDN}/fullchain.pem;
        #ssl_certificate_key /etc/letsencrypt/live/${PROXY_FQDN}/privkey.pem;
    
        location / {
            access_by_lua_block {
                local opts = {
                    redirect_uri = "http://${PROXY_FQDN}/redirect_uri",
                    discovery = "https://cilogon.org/.well-known/openid-configuration",
                    client_id = "cilogon:/client_id/9c02e8c0e767934c8e0bb60807dfa39",
                    client_secret = "${CLIENT_SECRET}",
                    ssl_verify = "no",
                    scope = "openid email profile org.cilogon.userinfo",
                    redirect_uri_scheme = "http",
                    session_contents = {id_token=true},
                    renew_access_token_on_expiry = true,
                    accept_none_alg = false
                }

                ngx.log(ngx.ERR, "Starting OpenID Connect authentication")

                local res, err = require("resty.openidc").authenticate(opts)

                if err then
                    ngx.log(ngx.ERR, "Authentication failed: " .. err)
                    ngx.status = 403
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.log(ngx.ERR, "Authentication successful, session created")
            }
            proxy_pass https://${TARGET_FQDN};
        }
    }
}